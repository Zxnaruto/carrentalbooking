spring.application.name=carrentalbooking
server.port=8080
#Mysql database
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:8989/rental_car_booking?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf-8
spring.datasource.username=root
spring.datasource.password=123456

#连接池的设置
#初始化时建立物理连接的个数
spring.datasource.initialSize=5
#最小连接池数量
spring.datasource.minIdle=5
#最大连接池数量 maxIdle已经不再使用
spring.datasource.maxActive=20
#获取连接时最大等待时间，单位毫秒
spring.datasource.maxWait=60000
#申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
spring.datasource.testWhileIdle=true
#既作为检测的间隔时间又作为testWhileIdel执行的依据
spring.datasource.timeBetweenEvictionRunsMillis=60000
#销毁线程时检测当前连接的最后活动时间和当前时间差大于该值时，关闭当前连接
spring.datasource.minEvictableIdleTimeMillis=30000
#用来检测连接是否有效的sql 必须是一个查询语句
#mysql中为 select 'x'
#oracle中为 select 1 from dual
spring.datasource.validationQuery=select 'x'
#申请连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
spring.datasource.testOnBorrow=false
#归还连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
spring.datasource.testOnReturn=false
#是否缓存preparedStatement,mysql5.5+建议开启
spring.datasource.poolPreparedStatements=true
#当值大于0时poolPreparedStatements会自动修改为true
spring.datasource.maxPoolPreparedStatementPerConnectionSize=20
#配置扩展插件
spring.datasource.filters=stat,wall,slf4j
#通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
#合并多个DruidDataSource的监控数据
spring.datasource.useGlobalDataSourceStat=true

# redis 配置
spring.redis.host=localhost
spring.redis.port=6379
spring.redis.database=0
spring.redis.password=123456